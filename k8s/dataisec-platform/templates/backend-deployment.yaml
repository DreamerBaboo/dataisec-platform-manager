apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.backend.name }}
  labels:
    app: {{ .Values.backend.name }}
spec:
  replicas: {{ .Values.backend.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.backend.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.backend.name }}
    spec:
      nodeSelector:
        {{- toYaml .Values.backend.nodeSelector | nindent 8 }}
      serviceAccountName: {{ .Values.backend.name }}-sa
      securityContext:
        fsGroup: {{ .Values.backend.securityContext.pod.fsGroup }}
      initContainers:
        - name: init-dirs
          image: alpine
          command: ['sh', '-c', 'mkdir -p /data/backend /data/templates && chmod -R 777 /data']
          volumeMounts:
            - name: backend-storage
              mountPath: /data/backend
            - name: templates-storage
              mountPath: /data/templates
      containers:
        - name: {{ .Values.backend.name }}
          image: "{{ .Values.backend.image.repository }}:{{ .Values.backend.image.tag }}"
          imagePullPolicy: {{ .Values.backend.image.pullPolicy }}
          securityContext:
            runAsUser: {{ .Values.backend.securityContext.container.runAsUser }}
            runAsGroup: {{ .Values.backend.securityContext.container.runAsGroup }}
            allowPrivilegeEscalation: {{ .Values.backend.securityContext.container.allowPrivilegeEscalation }}
            capabilities:
              add: {{ .Values.backend.securityContext.container.capabilities.add }}
          ports:
            - containerPort: {{ .Values.backend.service.port }}
          env:
            {{- range $key, $value := .Values.backend.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
            - name: JWT_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.backend.name }}-secret
                  key: jwt-secret
            - name: DEPLOYMENT_TEMPLATE_PATH
              value: "/app/deploymentTemplate"
            - name: KUBECONFIG
              value: "/app/.kube/config"
          volumeMounts:
            - name: docker-sock
              mountPath: /var/run/docker.sock
            - name: kube-config
              mountPath: /app/.kube
              readOnly: true
            - name: backend-storage
              mountPath: /app/backend
            - name: templates-storage
              mountPath: /app/deploymentTemplate
            - name: helm-cache
              mountPath: /app/.helm
          resources:
            {{- toYaml .Values.backend.resources | nindent 12 }}
      volumes:
        - name: docker-sock
          hostPath:
            path: /var/run/docker.sock
            type: Socket
        - name: kube-config
          secret:
            secretName: {{ .Values.backend.name }}-kubeconfig
            defaultMode: 0400
        - name: backend-storage
          persistentVolumeClaim:
            claimName: {{ .Values.backend.name }}-pvc
        - name: templates-storage
          persistentVolumeClaim:
            claimName: {{ .Values.backend.name }}-templates-pvc
        - name: helm-cache
          emptyDir: {}
